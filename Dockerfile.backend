# Dockerfile.backend

# 1. Builder stage
FROM node:20-slim AS builder
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy all package.json files and the lock file
COPY package.json package-lock.json* ./
COPY apps/backend/package.json ./apps/backend/
COPY apps/frontend/package.json ./apps/frontend/

# Install all dependencies for the workspace
# Disable Nx native module installation to avoid musl libc issues
ENV NX_SKIP_NATIVE_DEPS=true
RUN npm install

# Copy the rest of the source code
COPY . .

# Build the backend application
RUN npm run build --workspace=rancher-hub-backend

# 2. Production stage
FROM node:20-slim AS production
WORKDIR /app

# Install system dependencies for production
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -g 1001 nodejs && useradd -r -u 1001 -g nodejs nestjs

# Copy the built application from the builder stage
COPY --from=builder --chown=nestjs:nodejs /app/apps/backend/dist ./dist

# Copy the backend's package.json and the lock file
COPY --from=builder /app/apps/backend/package.json ./package.json
COPY --from=builder /app/package-lock.json* ./

# Install only production dependencies for the backend
# Disable Nx native module installation to avoid musl libc issues
ENV NX_SKIP_NATIVE_DEPS=true
RUN npm install --production

# Copy healthcheck script
COPY apps/backend/healthcheck.js ./healthcheck.js

# Set ownership and user
RUN chown -R nestjs:nodejs /app
USER nestjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

CMD ["node", "dist/main"]
